// 変数名は、難しい。
// var とか、switch を、変数名に使ったら、エラー出た。

/* ------------------------------------------------------ */
// state変数には、setState を通さないと、値を変更できません。
const Head = (props)=>{
    const [cont01,cont02] = useState(0)
    const f_change = ()=>{
        cont01 = cont01 + 1
        cont02(cont01)
    }
}
/* ------------------------------------------------------ */
// stateは、setNum を通さないと、値を変更できませんよ。
return(
    <>
        <button onClick={()=>{num + 1}}>{num}</button>
        <button onClick={()=>{setNum(num + 1)}}>{num}</button>
    </>
)
/* ------------------------------------------------------ */
// useStateの無限レンダリング
// button のonClickプロパティは、コンポーネント自体がレンダリングされた時に、実行する。
return(
    <button onClick={console.log('僕は人間じゃない')}>{num}</button>
)
// なので、コールバック関数、もしくは、関数自体を渡す必要があります。
return(
    <button onClick={f_setNum}>{num}</button>
)

/* ------------------------------------------------------ */
// 非同期処理、どこにreturnされてんのかわからん。
// 非同期処理の大元の関数には、returnできなかった。
const learn_api = async()=>{
    const f_json = await fetch('https://api.github.com/users/deatiger')
        .then(res => res.json())
        // 以下省略...
    return f_json // learn_api には、returnできなかったです。
}
console.log(learn_api) // returnしてるはずの値が表示されない。
/* ------------------------------------------------------ */
// async/awaitを使って、jsonを、外部に引数として渡す方法がわからない。
// あと、このjsonって引数なんだよ。意味わからん。
const learn_api01 = async()=>{
    let cont02 = fetch('https://api.github.com/users/deatiger')
    .then(res => res.json())
    .then(json => console.log(json))
}
/* ------------------------------------------------------ */
/* ------------------------------------------------------ */
/* ------------------------------------------------------ */
/* ------------------------------------------------------ */
/* ------------------------------------------------------ */
/* ------------------------------------------------------ */
/* ------------------------------------------------------ */
/* ------------------------------------------------------ */
/* ------------------------------------------------------ */
/* ------------------------------------------------------ */
/* ------------------------------------------------------ */
/* ------------------------------------------------------ */
